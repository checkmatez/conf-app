### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ChatRoom {
  id: ID!
  name: String!
}

type ChatRoomsResult {
  nodes: [ChatRoom!]!
  total: Int!
}

type CreateChatRoomError implements InputError {
  argErrors: [InputArgError!]!
  code: String!
  message: String!
}

union CreateChatRoomResponse = ChatRoom | CreateChatRoomError

type InputArgError {
  argName: String!
  message: String!
}

interface InputError {
  argErrors: [InputArgError!]!
  code: String!
  message: String!
}

type Message {
  author: User!
  chatRoom: ChatRoom!
  id: ID!
  text: String!
}

type MessagesResult {
  nodes: [Message!]!
  total: Int!
}

type Mutation {
  addChatMessage(chatRoomId: ID!, text: String!): Message!
  createChatRoom(name: String!): CreateChatRoomResponse!
}

type Query {
  chatRooms(page: Int = 0, pageSize: Int = 20): ChatRoomsResult!
  messages(chatRoomId: ID!, page: Int = 0, pageSize: Int = 20): MessagesResult!
  serviceDescription: String!
}

type Subscription {
  chatMessageAdded(chatRoomId: ID!): Message!
}

type User {
  avatarUrl: String
  email: String
  githubProfileUrl: String
  id: ID!
  username: String!
}
